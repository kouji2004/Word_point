Javaのclass（クラス）とは、
オブジェクト指向プログラミングの基本的な概念のひとつで、オブジェクトが持つ属性やメソッドを定義する。

「オブジェクトがどんなもので、何をするのか」を定義することから、よく設計図に例えられる。



クラスの中身
クラスの中身は主にフィールド、メソッド、コンストラクタを定義する。それぞれ具体的に説明

①フィールド
フィールドと呼ばれるメンバ変数は、オブジェクトの属性や状態を表す変数

車で例えると、車は排気量、燃費、走行距離などの情報を持っており、これがフィールド。

フィールドを宣言することにより、そのオブジェクトがどのような属性を持っているかを定義でる。　



②メソッド
メソッドには、オブジェクトの機能や操作を記述

車で例えてみると、「走る」「止まる」「クラクションを鳴らす」といった操作がメソッド。


③コンストラクタ
コンストラクタは、クラスのインスタンス生成時に実行される処理のこと。

コンストラクタを使用すると、メンバ変数を初期化できるので、最初に変数を定義できる。




3．クラスの書き方

クラスの中身を理解したところで、クラスの書き方を確認。

クラスを定義する場合、次のように記述する。


class クラス名{
    //ここにフィールドやメソッドなどを記述する
    
}
classのあとにクラス名を記述し、{ から } までのブロック内に、フィールドやメソッド、コンストラクタなどを定義する。



①クラスの命名規則
Javaのクラスには以下のような命名規則がある。


・先頭文字は大文字、それ以降は小文字

・先頭文字に数字は使用不可

・単語区切りは大文字

例）Car、RentalService




②クラスの修飾子（そうしょくし）
クラスの修飾子とは、クラスへのアクセスを制御するJavaの予約語。

修飾子をまとめると
public protected private　なし　が挙げられる。

   アクセス修飾子	　　　                        説明
  public	　　　　　　    制限はなく、どこからでもアクセス可能
  protected	　　　                同一パッケージ内、またはサブクラスからのみアクセス可能
       なし	　　　　　　　　    同一パッケージ内のみアクセス可能
  private	　　　　　　　 同一クラス内でのみアクセス可能

これらの違いを理解したうえで、クラスへのアクセス制限を設定する必要がある。






4．クラスを使ってみよう

クラスの使い方を解説。

①クラスを作成する
まず「Car」というクラスを作成。


class Car{
    //フィールド
    private int fuel;           //燃料
    private int consumption;    //燃費

    //コンストラクタ（初期値を設定）
    Car(int fuel,int consumption){
        this.fuel = fuel;
        this.consumption = consumption;
    }

    //メソッド
    //運転
    public void run(int mileage){
        this.fuel -= mileage / consumption;
    }

    //燃料計の表示
    public void dispFuelGauge(){
        System.out.println("残量：" + this.fuel + "ℓ");
System.out.println("残量：" + this.fuel + "L");

    }
}
Carクラスには、フィールドとして「fuel」、「consumption」、メソッドとして「run」と「dispFuelGauge」、コンストラクタを定義している。


Carクラスは燃料と燃費を保持する変数、「運転する」動作と「燃料計を表示する」動作を表すメソッド、変数を初期化するコンストラクタを記述している。






②オブジェクトを生成する
設計図であるクラスを作成したので、次は実体を表すオブジェクトを生成。


class App {
    public static void main(String[] args) {
        //インスタンス化
        Car car = new Car(70,10); //燃料70Lℓ、燃費10km/Lを設定
    }
}
ここでは、車の初期設定値として、燃料70L、燃費10km/Lを設定。



