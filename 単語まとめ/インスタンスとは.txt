インスタンスとは
・実態を意味する言葉
・コンピューターに組み込まれている記憶装置にデータを展開し情報を処理することをインスタンスと呼び、
 データを実態としてコンピューターのメインメモリなどで処理を指すこと。

javaのインスタンスとは
簡単に言えばクラスをnewするとできるもの



インスタンスの概要
クラスは java において必要不可欠な要素となっていますが、

ただクラスを作成しただけではまだ何も生み出すことはありません。

そのクラスを実体化することで初めて実体としての機能を活用することができます。

この「クラスを実体化する」ことを「インスタンス化」と呼び、実際にできた実体を「インスタンス」と呼びます。

よくクラスが「設計図」として例えられていますが、

もし設計図で例えるのならばネジの構造が記された設計図がクラス、

ネジクラスをもとにネジを実体化することを「インスタンス化」、

インスタンス化によって出来上がったネジが「インスタンス」となります。

こういった様々なインスタンスを組み合わせることで例えば、車が出来上がるといった具合にプロジェクトが開発されます。

Java では様々なクラスが生成され、インスタンス化が繰り返されています。










new 演算子　(インスタンスの生成)
クラスのインスタンス化には new 演算子を使います。

・new 演算子の構文：　型 変数名 = new クラス名();

クラス名()は厳密に言うとコンストラクタ名のことを指します。

　※クラスとコンストラクタの関係については別記事で紹介させていただきます。








new 演算子でクラスをインスタンス化(new クラス名())して変数へ代入(型 変数名 = )することで

インスタンスを生成することができます。


public class Task {	
	public static void main(String[] arg) {

		Object test = new Test();
		test.method("田中");
		System.out.println(test.name); // 結果：田中を表示

	}
}
test の method に田中を入れて、test の name を呼んで「田中」を表示させるクラスです。

このように new 演算子を用いてクラスのインスタンス生成を行い、

そのインスタンスが保持するメソッドやフィールドを利用することができます











生成されたインスタンスは変数名で呼び出すことができます。

この際に同クラスを元に2つのインスタンスを生成した場合、

それぞれ別のインスタンスとして判断されます。

public class Task {	
	public static void main(String[] arg) {
		Object test1 = new Test();
		Object test2 = new Test();
	}
}
同じ Test クラスから生成されたインスタンス test1, test2 はそれぞれ独立しているため、

それぞれの内容を別々に更新しても互いに影響は与えません。

Object test1 = new Test();
Object test2 = new Test();

test1.method("田中"); // test1 の method に田中を渡す
test2.method("山本"); // test2 の method に山本を渡す

System.out.println(test1.name); // 結果：田中を表示
System.out.println(test2.name); // 結果：山本を表示

※為になる話
Test クラスで使用した String も実はクラスで、インスタンス生成を行なっています。

String はよく使われるクラスとして特別扱いされており new 演算子を使わずにインスタンス生成されますが、

省略せずに書くと「 String name = new String();」となります。




